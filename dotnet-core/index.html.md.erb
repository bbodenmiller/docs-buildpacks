---
title: .NET Core Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

This topic describes how to push Cloud Foundry apps using the .NET Core buildpack. You can find supported ASP.NET Core versions in the [.NET Core buildpack release notes](https://github.com/cloudfoundry/dotnet-core-buildpack/releases).

<p class="note"><strong>Note</strong>: The .NET Core buildpack only works with <a href="https://www.microsoft.com/net/core">ASP.NET Core</a>. For apps which are not based on this toolchain, refer to the legacy <a href="#legacy">.NET buildpack.</a></p>

## <a id='pushing-apps'></a> Push an App ##

Cloud Foundry automatically uses the .NET Core buildpack when one or more of the following conditions are met:

- The pushed app contains one or more `*.csproj` or `*.fsproj` files.
- The app is pushed from the output directory of the `dotnet publish` command.

If your Cloud Foundry deployment does not have the .NET Core buildpack installed or the installed version is out of date, push your app with the `-b` option to specify the buildpack:

<pre class="terminal">
$ cf push MY-APP -b https://github.com/cloudfoundry/dotnet-core-buildpack.git
</pre>

## <a id='source-based'></a>Source-based, Non-published Workflow ##

This is the recommended workflow because the buildpack can keep all your dependencies in-sync and up-to-date.
When using this workflow, here are some edge-cases you may run into:

### <a id='multiple-projects'></a>Deploy Apps with Multiple Projects ###

To deploy an app that contains multiple projects, you must specify a main project for the buildpack to run. Create a `.deployment` file in the root folder of the app which sets the path to the main project as follows:

```text
[config]
project = <main project>
```

1. Set `project` to the `*.csproj` or `*.fsproj` file of the main project.

For example, if an app contains three projects in the `src` folder (the main project `MyApp.Web`, `MyApp.DAL`, and `MyApp.Services`), format the `.deployment` file as follows:

```text
[config]
project = src/MyApp.Web/MyApp.Web.csproj
```

In this example, the buildpack automatically compiles the `MyApp.DAL` and `MyApp.Services` projects if the `MyApp.Web.csproj` file of the main project lists them as dependencies. The buildpack attempts to execute the main project with `dotnet run -p src/MyApp.Web/MyApp.Web.csproj`.

### <a id='non-default-package-sources'></a>Using Non-Default Package Sources ###

To deploy an app that uses non-default package sources, you must specify those package sources in the [`NuGet.Config` file](https://docs.microsoft.com/en-us/nuget/reference/nuget-config-file).
For a basic example, see this [Hello World sample](https://github.com/IBM-Bluemix/aspnet-core-helloworld).

### <a id='disabling-nuget'></a>Disabling and Clearing the NuGet Package Cache

You may need to disable NuGet package caching, or clear NuGet packages cached in the staging environment, in one of the following scenarios:

* Your app fails to stage because it runs out of space, exceeding the maximum allowable disk quota.
* You have added pre-release packages to test a new feature, then decided to revert back to the main NuGet feed. You may need to remove the packages you changed from the cache to avoid conflicts.

Disabling NuGet caching both clears any existing NuGet dependencies from the staging cache and prevents the buildpack from adding NuGet dependencies to the staging cache. To disable NuGet package caching, set the `CACHE_NUGET_PACKAGES` environment variable to `false`. If the variable is not set, or set to a different value, there is no change.

Perform one of the following procedures to set `CACHE_NUGET_PACKAGES` to `false`:

* Locate your app manifest, `manifest.yml`, and set the `CACHE_NUGET_PACKAGES` environment variable, following the format of the example below:

    ```yml
    ---
    applications:
    - name: sample-aspnetcore-app
      memory: 512M
      env:
        CACHE_NUGET_PACKAGES: false
    ```

* Use `cf set-env` to set the `CACHE_NUGET_PACKAGES` environment variable on the command line:

    <pre class="terminal">$ cf set-env YOUR-APP CACHE_NUGET_PACKAGES false</pre>

See the [Environment Variables](../../devguide/deploy-apps/manifest.html#env-block) section of the <em>Deploying with Application Manifests</em> topic for more information.

## <a id='framework-dependent'></a>Framework Dependent Deployments (FDD) Workflow ##
This is the recommended workflow when deploying an app in an offline setting.

To deploy an [FDD](https://docs.microsoft.com/en-us/dotnet/core/deploying/index#framework-dependent-deployments-fdd) using the buildpack:


1. Publish the app by running `dotnet publish [-f <framework>] [-c Release]`.

1. Navigate to the `bin/<Debug|Release>/<framework>/<runtime>/publish` directory. Or, if your app uses a `manifest.yml`, specify a path to the publish output folder. This allows you to push your app from any directory.

1. Push your app.

**Note**: Do not set `applyPatches: false` in  `*.runtimeconfig.json`. This will prevent your app from receiving updates to the runtime version.

## <a id='self-contained'></a>Self-Contained Deployments (SCD) Workflow ##
This workflow is not recommended. Because this workflow results in a prepublished binary, we are unable to keep all your dependencies in-sync and up-to-date.

The SCD workflow is the same as the FDD workflow, except you must specify a runtime in the publish command:

```
dotnet publish -r ubuntu14.04-x64
```

See [more details for FDD vs SCD deployments](https://docs.microsoft.com/en-us/dotnet/core/deploying/)

## <a id='offline'></a>Offline Workflow - Push an App in a Disconnected Environment##

Using the [Framework Dependent Deployment (FDD) workflow](#framework-dependent) is the recommended deployment method for an offline environment, as it will allow the deployed application to use the latest runtime provided by the offline buildpack. 

## <a id='dotnet-sdk'></a> .NET Core SDKs ##
To pin the .NET Core SDK to a specific version or version line, create a `buildpack.yml` file at the app root and add the following:

```
dotnet-core:
  sdk: 2.1.201
```

The following formats are also valid:

```
dotnet-core:
  sdk: 2.1.x
```

```
dotnet-core:
  sdk: 2.x
```

The buildpack chooses which SDK to install based on the files present at the app root, according to the following order of precedence:

1. `buildpack.yml`
1. `global.json`
1. If the app contains only `*.fsproj` files, the buildpack installs the latest 1.1.x SDK.

<p class="note"><strong>Note</strong>: The app respects the SDK version specified in <code>global.json</code> at runtime. If you provide versions in both <code>global.json</code> and <code>buildpack.yml</code>, ensure that you specify the same versions in both files.</p>

## <a id='port'></a>Configure the Listen Port ##

For your .NET Core app to work on Cloud Foundry, you must modify the `Main` method to configure the app to listen on the port specified by the `$PORT` environment variable, which Cloud Foundry sets automatically.

1. Open the file that contains your `Main` method.

1. Add a `using` statement to the top of the file.

    ```c#
    using Microsoft.Extensions.Configuration;
    ```

1. Add the following lines before the line `var host = new WebHostBuilder()`:

    ```c#
    var config = new ConfigurationBuilder()
        .AddCommandLine(args)
        .Build();
    ```
1. Add the following line after `.UseKestrel()`:

    ```c#
    .UseConfiguration(config)
    ```

    This allows the buildpack to pass the correct port from `$PORT` to the app when running the initial startup command.

1. Add `Microsoft.Extensions.Configuration.CommandLine` as a dependency:
    - `*.csproj`:

        ```xml
        <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine">
            <Version>VERSION</Version>
        </PackageReference>
        ```

    where VERSION is the version of the package to use. Valid versions can be found on `https://www.nuget.org`.

1. If your app requires any other files at runtime, such as JSON configuration files, add them to the `include` section of `copyToOutput`.

1. Save your changes.

With these changes, the `dotnet run` command copies your app `Views` to the build output, where the .NET CLI can find them. Refer to the following example `Main` method:

```c#
public static void Main(string[] args)
{
    var config = new ConfigurationBuilder()
        .AddCommandLine(args)
        .Build();

    var host = new WebHostBuilder()
        .UseKestrel()
        .UseConfiguration(config)
        .UseContentRoot(Directory.GetCurrentDirectory())
        .UseStartup<Startup>()
        .Build();
    host.Run();
}
```

## <a id='custom-libraries'></a>Add Custom Libraries ##

If your app requires external shared libraries that are not provided by the rootfs or the buildpack, you must place the libraries in an `ld_library_path` directory at the app root.

<p class="note"><strong>Note</strong>: You must keep these libraries up-to-date. They do not update automatically.</p>

The .NET Core buildpack automatically adds the directory `<app-root>/ld_library_path` to `LD_LIBRARY_PATH` so that your app can access these libraries at runtime.

## <a id='legacy'></a>Legacy .NET Buildpack ##

A legacy [.NET buildpack](https://github.com/cloudfoundry-community/.net-buildpack) exists, built by the Cloud Foundry community. This buildpack addresses apps not based on .NET Core. However, it requires you to write and compile your apps using [Mono](http://www.mono-project.com/), for example from Xamarin Studio, MonoDevelop, or xbuild.
